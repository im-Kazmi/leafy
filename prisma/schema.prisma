datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  clerkId     String
  name        String
  imageUrl    String
  email       String?   @unique
  password    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  role        UserRole  @default(GUEST)
  posts       Post[]
  comments    Comment[]
  likes       Like[]
  viewedPosts View[]
  followerId  String    @db.ObjectId
  follower    Category  @relation(fields: [followerId], references: [id], onDelete: Cascade)

  @@index([followerId])
}

model Post {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  Description String
  imageUrl    String
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  categoryId  String    @db.ObjectId
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  likes       Like[]
  comments    Comment[]
  views       View[]

  @@index([userId])
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  posts     Post[]
  followers User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Comment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  imageUrl   String
  inviteCode String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId     String   @db.ObjectId
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@index([postId])
  @@index([userId])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([postId])
}

model View {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String  @db.ObjectId
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Post   Post?   @relation(fields: [postId], references: [id])
  postId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
  @@index([postId])
}

enum UserRole {
  ADMIN
  MODERATOR
  GUEST
}
